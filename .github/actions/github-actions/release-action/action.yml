name: 'Action Release Manager'
description: 'Manages GitHub Action releases by validating changes and creating release PRs'

inputs:
  mode:
    description: 'Operation mode: check (for PR validation) or release (for creating releases)'
    required: true
  base_branch:
    description: 'Base branch to create a version branch from when the version branch does not exist'
    required: false
    default: 'main'
  main_branch:
    description: 'Main default branch of the repository'
    required: false
    default: 'main'

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v45

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install Semver
      shell: bash
      run: |
        mkdir -p /tmp/action_node_modules
        npm install semver --prefix /tmp/action_node_modules
        echo "NODE_PATH=/tmp/action_node_modules/node_modules" >> $GITHUB_ENV

    - name: Find and validate action directory
      id: find-action
      uses: ./.github/actions/github-actions/validate-return-modified-action
      with:
        changed_files: ${{ steps.changed-files.outputs.all_modified_files }}

    - name: Handle action directory validation failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const errorMsg = '${{ steps.find-action.outputs.error }}' || 'Action validation failed';
          if ('${{ inputs.mode }}' === 'check') {
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: errorMsg,
              event: 'REQUEST_CHANGES'
            });
          }

          core.setFailed(errorMsg);
          process.exit();

    - name: Dismiss PR change requests if all OK
      if: inputs.mode == 'check' && steps.find-action.outputs.error == ''
      uses: actions/github-script@v7
      with:
        script: |
          const reviews = await github.rest.pulls.listReviews({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });

          const reviewsToDismiss = reviews.data.filter(r => r.user.login === 'github-actions[bot]' && r.state === 'CHANGES_REQUESTED');

          for (const review of reviewsToDismiss) {
            await github.rest.pulls.dismissReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              review_id: review.id,
              message: 'Dismissing review as it is resolved by a subsequent commit'
            });
          }

    - name: Determine release info
      if: inputs.mode == 'release' && steps.find-action.outputs.modified_action != ''
      id: release-info
      uses: actions/github-script@v7
      with:
        script: |
          const { execSync } = require('child_process');
          
          let modifiedActions;
          try {
            modifiedActions = JSON.parse('${{ steps.find-action.outputs.modified_action }}');
          } catch (e) {
            console.log('No actions to release');
            process.exit();
          }

          if (modifiedActions.length === 0) {
            console.log('No actions to release');
            process.exit();
          }

          const releaseInfo = modifiedActions.map(action => {
            let releaseType;
            try {
              execSync(`git show "origin/${action.version}:${action.action}"`, { stdio: 'ignore' });
              releaseType = "update";
            } catch {
              releaseType = "release";
            }

            return {
              action_path: action.action,
              version: action.version,
              release_type: releaseType,
              branch_name: action.action == '.' ? `${action.version}-${releaseType}-${context.repo.repo}` : `${action.version}-${releaseType}-${action.action.replace('/', '-').replace('\\', '-')}`
            };
          });

          core.setOutput('release_info', JSON.stringify(releaseInfo));

    - name: Create version and release branches
      if: inputs.mode == 'release' && steps.find-action.outputs.modified_action != ''
      shell: bash
      run: |
        release_info=$(echo '${{ steps.release-info.outputs.release_info }}' | jq -c '.[]')
        for info in $release_info; do
          version=$(echo $info | jq -r '.version')
          branch_name=$(echo $info | jq -r '.branch_name')
          action_path=$(echo $info | jq -r '.action_path')
          release_type=$(echo $info | jq -r '.release_type')
          if ! git rev-parse --quiet --verify refs/heads/$version; then
            if ! git ls-remote --heads origin $version | grep -q $version; then
              git checkout ${{ inputs.base_branch }}
              git pull
              git checkout -b $version
              git push -u origin "refs/heads/$version"
            else
              echo "Version branch $version exists remotely, checking out"
              git checkout $version
              git pull
            fi
          else
            echo "Version branch $version already exists locally, skipping creation."
            git checkout $version
            git pull
          fi

          git config user.name 'Action Release Bot'
          git config user.email 'action-release-bot@users.noreply.github.com'
          git branch -a
          git fetch origin ${{ inputs.main_branch }}
          git checkout -b $branch_name
          git checkout origin/${{ inputs.main_branch }} -- $action_path
          git add .
          git commit -m "[$release_type] $version for $action_path"
          git push -u origin $branch_name
        done

    - name: Create pull requests
      if: inputs.mode == 'release' && steps.find-action.outputs.modified_action != ''
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        release_info=$(echo '${{ steps.release-info.outputs.release_info }}' | jq -c '.[]')
        for info in $release_info; do
          version=$(echo $info | jq -r '.version')
          branch_name=$(echo $info | jq -r '.branch_name')
          action_path=$(echo $info | jq -r '.action_path')
          release_type=$(echo $info | jq -r '.release_type')

          gh pr create \
            --base "$version" \
            --title "[$release_type] $version $release_type for $action_path" \
            --head "$branch_name" \
            --body "## What has been done:

            - $version $release_type for $action_path"
        done
        
        git checkout ${{ inputs.main_branch }}